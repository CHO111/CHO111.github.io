{"meta":{"title":"OWL Sound","subtitle":"","description":"","author":"CHO","url":"https://CHO111.github.io","root":"/"},"pages":[],"posts":[{"title":"Custom YoLov3","slug":"Custom-YoLov3","date":"2021-08-03T14:09:07.000Z","updated":"2021-08-09T13:56:49.222Z","comments":true,"path":"2021/08/03/Custom-YoLov3/","link":"","permalink":"https://cho111.github.io/2021/08/03/Custom-YoLov3/","excerpt":"","text":"콘테스트 개요1. 설명 qt로 틀을만들고 그안에 opencv로 기능을 구현하고 yolo를 custom하여 학습시킨 모델을 가지고 도로위의 사람을 검출하는 프로그램 2. 도전목표 custom yolo를 활용해 원하는학습을 시키고 학습을시킨 객체를 검출해보는것 3. 기여 custom yolo 모델 만들기, 이미지 라벨링, opencv코드 구현 4. 결과 어설프지만 작동은 잘된다. 발표자료 링크pdf","categories":[{"name":"Project","slug":"Project","permalink":"https://cho111.github.io/categories/Project/"},{"name":"Study","slug":"Project/Study","permalink":"https://cho111.github.io/categories/Project/Study/"}],"tags":[{"name":"Python, YOLO, PyQt5","slug":"Python-YOLO-PyQt5","permalink":"https://cho111.github.io/tags/Python-YOLO-PyQt5/"}]},{"title":"YOLOv4 논문 리뷰","slug":"postYOLOv4-review","date":"2021-06-27T12:55:51.000Z","updated":"2021-06-27T13:04:20.758Z","comments":true,"path":"2021/06/27/postYOLOv4-review/","link":"","permalink":"https://cho111.github.io/2021/06/27/postYOLOv4-review/","excerpt":"","text":"#YOLOv4 논문 리뷰YOLOv4 논문을 리뷰 해보았습니다. pdf링크","categories":[{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/categories/Study/"},{"name":"Review","slug":"Study/Review","permalink":"https://cho111.github.io/categories/Study/Review/"}],"tags":[{"name":"study","slug":"study","permalink":"https://cho111.github.io/tags/study/"}]},{"title":"C++_공부3","slug":"C-study3","date":"2021-06-26T13:10:13.000Z","updated":"2021-06-26T13:18:56.511Z","comments":true,"path":"2021/06/26/C-study3/","link":"","permalink":"https://cho111.github.io/2021/06/26/C-study3/","excerpt":"","text":"C++ 기초부터 공부하기반복문에 대해 알아보자.반복문에는 for문과 while문이 있다.for문은 -&gt; 우리가 얼마만큼 반복을 시켜야 하는지 알떄 사용을한다.while문은 -&gt; 우리가 얼마만큼 반복을 시켜줘야 하는지 모를떄 / 어떻게 반복해야할지 조건만 알떄 사용한다. 123456789int main()&#123; for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; &quot;owl&quot; &lt;&lt; endl; &#125; return 0; &#125; 12345678910int temp;int sum = 0;while (std::cin &gt;&gt; temp)&#123; sum += temp;&#125;std::cout &lt;&lt; sum &lt;&lt; std::endl;return 0; 위 코드는 for문과 while문에대한 예시코드이다.for문 코드는 owl을 10번 반복출력 시키는 코드이다 while문 코드는 입력이 멈출떄까지 입력받은숫자를 더하는 코드이다 . 입력을 멈추는조건을 지정해주지 않았지만 ctrl + z 를 입력하면 입력을 멈춘다. 알아두어야할것들 c++ 은 반복문안에서 변수를 만들수있다. cout의 특별한 기호 ‘\\n’ cin 의 특별한 기호 EOF (end of file) ctrl + z 키 리눅스에서는 EOF (end of file)는 ctrl + D 키","categories":[{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/categories/Study/"},{"name":"C++","slug":"Study/C","permalink":"https://cho111.github.io/categories/Study/C/"}],"tags":[{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/tags/Study/"}]},{"title":"C++_공부2","slug":"C-study2","date":"2021-06-26T12:55:35.000Z","updated":"2021-06-26T13:08:57.218Z","comments":true,"path":"2021/06/26/C-study2/","link":"","permalink":"https://cho111.github.io/2021/06/26/C-study2/","excerpt":"","text":"C++ 기초부터 공부하기콘솔 입출력c++_공부1 에 이어서 입출력에대해 자세히 알아보자. 12345678910int main()&#123; int a; int b; std::cin &gt;&gt; a; std::cin &gt;&gt; b; std::cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; std::endl; return 0; &#125; 위코드는 숫자 두개를 입력받아 출력시키는 코드이다여기서 cin의 단점이 있는대cin은 중간에 공백이 들어가면 인식을멈추고 다음 cin 한대 일을 맡겨버리는 단점이 있다 . 위 사진이 정상적으로 입력햇을때 나오는결과이다.위 사진은 입력 받은 숫자뒤에 공백을 넣고 한번더 입력을하면 바로 결과가 나와버리는 cin의 단점을 보여주는 결과이다. 알아두어야할것들 std::endl 이친구는 개행을 시켜주는 함수 ‘\\n’(개행문자) cin 은 공백문자나 개행문자같은것을 무시한다 getline()을쓰면 공백문자도 다 읽는다. enter을 누르면 컴파일러한대 암묵적으로 개행을 시켜라 라고 지시","categories":[{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/categories/Study/"},{"name":"C++","slug":"Study/C","permalink":"https://cho111.github.io/categories/Study/C/"}],"tags":[{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/tags/Study/"}]},{"title":"C++_공부","slug":"C-study","date":"2021-06-26T12:33:37.000Z","updated":"2021-06-26T13:00:10.017Z","comments":true,"path":"2021/06/26/C-study/","link":"","permalink":"https://cho111.github.io/2021/06/26/C-study/","excerpt":"","text":"C++ 기초부터 공부하기메인 함수는 뭘까 ? 메인함수는 운영체제가 프로그램이 시작될떄 호출하는 함수다. 콘솔 입출력입력은 cin 출력은 cout이다 . 입출력에 대하여 알아보자. 1234567891011121314151617181920int main()&#123; int OWL&#123; 10 &#125;; double Num&#123; 9.8 &#125;; int Myage; //출력은 두종류로 쓸수있다 &#x27;\\n&#x27; 로 마무리하거나 endl로 마무리하는법이 있다. std::cout &lt;&lt; &quot;hello world&quot; &lt;&lt; &#x27;\\n&#x27;; std::cout &lt;&lt; &quot;hello world&quot; &lt;&lt; std::endl; // cout은 함수가 아니라 객체다 //c++를 만든 사람들이 cout을 엄청 똑똑하게 만들었다 . std::cout &lt;&lt; OWL &lt;&lt; std::endl; std::cout &lt;&lt; Num &lt;&lt; std::endl; printf(&quot;hello world\\n&quot;); // frintf는 함수다 printf(&quot;%d\\n&quot;, OWL); // 오래되서 멍청하다 // &lt;&lt; 이 연산자는 출력 연산자다. return 0; // main 함수에 있는 리턴 0는 프로그램이 꺼질때 운영체제한대 얘가 끝낫다라는것을 말한다.&#125; 위 코드에 c++의 cout과 c의 printf에 대해 비교주석을 써놓았는대cout은 자료형을 알아서 읽어서 출력하지만 printf은 서식(자료형)에대해 입력을 해주어야 출력이 된다.","categories":[{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/categories/Study/"},{"name":"C++","slug":"Study/C","permalink":"https://cho111.github.io/categories/Study/C/"}],"tags":[{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/tags/Study/"}]},{"title":"C++ Qt","slug":"C++_Qt","date":"2021-06-18T06:55:34.000Z","updated":"2021-06-25T12:15:59.313Z","comments":true,"path":"2021/06/18/C++_Qt/","link":"","permalink":"https://cho111.github.io/2021/06/18/C++_Qt/","excerpt":"","text":"C++ Qt로 간단한 GUI만들기 사진과 같은 GUI를 구현 해보자!. 프로젝트명은 QtWidgetsApplication1 로 생성하였다. UI 구성 h.파일코드123456789101112131415161718#pragma once#include &lt;QtWidgets/QDialog&gt;#include &quot;ui_QtWidgetsApplication1.h&quot;class QtWidgetsApplication1 : public QDialog&#123; Q_OBJECTpublic: QtWidgetsApplication1(QWidget *parent = Q_NULLPTR);private: Ui::QtWidgetsApplication1Class ui;public slots: void btn_run_clicked();&#125;; cpp.파일코드12345678910111213141516171819202122232425262728293031323334#include &quot;QtWidgetsApplication1.h&quot;QtWidgetsApplication1::QtWidgetsApplication1(QWidget *parent) : QDialog(parent)&#123; ui.setupUi(this); connect(ui.btn_run, SIGNAL(clicked()), this, SLOT(btn_run_clicked())); connect(ui.checkBox_1, SIGNAL(clicked()), this, SLOT(checkBox1_clicked())); connect(ui.checkBox_2, SIGNAL(clicked()), this, SLOT(checkBox2_clicked())); connect(ui.checkBox_3, SIGNAL(clicked()), this, SLOT(checkBox3_clicked())); connect(ui.checkBox_4, SIGNAL(clicked()), this, SLOT(checkBox3_clicked())); ui.comboBox-&gt;addItem(&quot;Male&quot;); ui.comboBox-&gt;addItem(&quot;FeMale&quot;);&#125;void QtWidgetsApplication1::btn_run_clicked()&#123; ui.label_6-&gt;setText(&quot;Age:&quot; + ui.spinBox-&gt;cleanText()); ui.label_5-&gt;setText(&quot;Gender:&quot; + ui.comboBox-&gt;currentText()); QString chk1 = &quot;&quot;, chk2 = &quot;&quot;, chk3 = &quot;&quot;, chk4=&quot;&quot;; if (ui.checkBox_1-&gt;isChecked()) chk1 = &quot;Hobby :Watching Movie&quot;; if (ui.checkBox_2-&gt;isChecked()) chk2 = &quot;Hobby :Sports&quot;; if (ui.checkBox_3-&gt;isChecked()) chk3 = &quot;Hobby :Drawing&quot;; if (ui.checkBox_4-&gt;isChecked()) chk3 = &quot;Hobby :Pet&quot;; ui.label_4-&gt;setText(QString(&quot;\\n%1 \\n%2 \\n%3 \\n%4&quot;).arg(chk1, chk2, chk3, chk4));&#125;; 실행결과","categories":[{"name":"C++","slug":"C","permalink":"https://cho111.github.io/categories/C/"}],"tags":[{"name":"C++, Qt","slug":"C-Qt","permalink":"https://cho111.github.io/tags/C-Qt/"}]},{"title":"Dacon-card","slug":"Dacon-card","date":"2021-06-16T10:40:21.000Z","updated":"2021-06-25T12:15:59.313Z","comments":true,"path":"2021/06/16/Dacon-card/","link":"","permalink":"https://cho111.github.io/2021/06/16/Dacon-card/","excerpt":"","text":"신용카드 사용자 연체 예측 AI 경진대회 콘테스트 개요1. 설명 신용카드 사용자들의 개인 신상정보 데이터로 사용자의 신용카드 대금 연체 정도를 예측 2. 도전목표 현재 많은 금융업계는 인공지능(AI)를 활용한 금융 서비스를 구현하고자 합니다. 사용자의 대금 연체 정도를 예측할 수 있는 인공지능 알고리즘을 개발해 금융업계에 제안할 수 있는 인사이트를 발굴해주세요! 신용카드 사용자 데이터를 보고 사용자의 대금 연체 정도를 예측하는 알고리즘 개발 3. 평가 심사 기준: Logloss 1차 평가(Public Score): 테스트 데이터 중 랜덤 샘플 된 50%로 채점, 대회 기간 중 공개 2차 평가(Private Score): 나머지 50 % 테스트 데이터로 채점, 대회 종료 직후 공개 최종 순위는 선택된 파일 중에서 채점되므로, 참가자는 제출 창에서 자신이 최종적으로 채점 받고 싶은 파일 2개를 선택해야 함 2개의 선택 파일 중 높은 점수를 기준으로 최송 순위를 결정 최종 파일 미선택시 처음으로 제출한 파일로 자동 선택됨 대회 직후 공개되는 Private Score 랭킹은 최종 순위가 아니며, 코드 검증 후 최종 수상자가 결정됨 대회 평가 규칙을 준수한 제출팀 중 Private Score를 기준으로 최종 순위를 결정 4. 상품 1st ~ 10st : ₩ 100,000 5. 참고 ※ 월간 데이콘은 데이콘 브론즈 이상의 티어를 갖고있는 분들만 수상이 가능합니다. 6. 기여 xgboost 등 기법을 사용하여 정형 데이터 가공 7. 결과 714팀 중 404등 최종점수 - 0.70742 소스 코드code 보기 대회 발표 자료pdf","categories":[{"name":"Project","slug":"Project","permalink":"https://cho111.github.io/categories/Project/"},{"name":"Dacon","slug":"Project/Dacon","permalink":"https://cho111.github.io/categories/Project/Dacon/"}],"tags":[{"name":"Machine learning , python","slug":"Machine-learning-python","permalink":"https://cho111.github.io/tags/Machine-learning-python/"}]},{"title":"Dacon 부동산 시각화 Project","slug":"Dacon_ProJect","date":"2021-06-02T16:04:46.000Z","updated":"2021-07-04T11:23:23.895Z","comments":true,"path":"2021/06/03/Dacon_ProJect/","link":"","permalink":"https://cho111.github.io/2021/06/03/Dacon_ProJect/","excerpt":"","text":"한국 부동산 데이터 시각화 경진대회 콘테스트 개요1. 설명 자산은 다양한 형태로 존재합니다. 현금이 될 수도 있고, 주식이 될 수도 잇습니다. 그 중에서도 “부동산”이라는 자산은 우리의 경제와 정치에 많은 영향을 주었습니다. 한국의 부동산 변화를 연구하여 사회 전반에 미치는 영향을 파악한다면 다가오는 미래에 관한 통찰을 얻을 수 있지 않을까요? 주어진 데이터와 외부 데이터를 적극 활용하여 유의미한 인사이트를 발굴해 주세요! 2. 도전목표 한국 부동산 움직임이 쉽고 명확하게 보이도록 시각화 부동산 데이터로부터 사회 현상을 설명하는 인사이트 발굴 외부 데이터를 적극 활용한 인사이트 발굴 파이썬 및 R의 시각화 툴을 활용한 데이터 분석 학습 3. 평가 1단계: 가채점 순위 : 유저 평가로 결정 2단계: 최종 순위 결정 : 유저 평가 70 %와 데이콘 심사위원단 평가 30 %를 반영한 최종 순위 결정 4. 상품 1st ~ 5st : ₩ 200,000 5. 참고 ※ 월간 데이콘은 데이콘 브론즈 이상의 티어를 갖고있는 분들만 수상이 가능합니다. 6. 기여 시각화, ppt 제작 7. 결과 3등 소스 코드Dacon에서 제출물보기 대회 발표 자료pdf","categories":[{"name":"Project","slug":"Project","permalink":"https://cho111.github.io/categories/Project/"},{"name":"Dacon","slug":"Project/Dacon","permalink":"https://cho111.github.io/categories/Project/Dacon/"}],"tags":[{"name":"Deep learning , Project","slug":"Deep-learning-Project","permalink":"https://cho111.github.io/tags/Deep-learning-Project/"}]},{"title":"Tabular Playground Series - Apr 2021(kaggle 대회)","slug":"kaggle-project","date":"2021-05-05T11:24:20.000Z","updated":"2021-06-25T12:15:59.315Z","comments":true,"path":"2021/05/05/kaggle-project/","link":"","permalink":"https://cho111.github.io/2021/05/05/kaggle-project/","excerpt":"","text":"Tabular Playground Series - Apr 2021 콘테스트 개요1. 설명과거에는 추천 대회보다 접근하기 쉽고 초보자에게 더 친숙한 많은 놀이터 대회를 시작했습니다.우리는 커뮤니티를 위해 이러한 대회를보다 일관되게 제공하기 위해 2021 년에 새로운 실험을 시도하고 있습니다.매월 1 일에 한 달간 표 형식의 놀이터 대회를 시작하고 다음과 같은 기간 동안 실험을 계속할 것입니다. 많은 관심과 참여 부탁드립니다. 2. 도전목표도전목표는 초보자가 학습에 더 집중하여 기초를 다지며 더높은 성과를 내는것입니다. 3. 평가 정확히 100,000 개의 행 과 헤더 행이 포함 된 csv 파일을 제출해야합니다 . 추가 열이나 추가 행이 있으면 제출에 오류가 표시됩니다. 파일에는 정확히 2 개의 열이 있어야합니다. PassengerId (순서에 상관없이 정렬 됨) Survived (이진 예측 포함 : 1은 생존, 0은 사망) 4. 상품 1st Place - Choice of Kaggle merchandise 2nd Place - Choice of Kaggle merchandise 3rd Place - Choice of Kaggle merchandise 5. 참고 초보자의 더 많은 참여를 유도하기 위해 Kaggle 상품은이 시리즈에서 1 인당 한 번만 제공됩니다. 이전에 우승 한 사람이 있으면 다음 팀으로 건너 뜁니다. 6. 기여 pycaret모델 만들기 및 파라미터 모델튜닝, ppt 제작 7. 결과 전체 1244팀중 280등(TOP23%) 소스 코드Kaggle에서 제출물보기 대회 발표 자료깃허브 pdf 링크","categories":[{"name":"Project","slug":"Project","permalink":"https://cho111.github.io/categories/Project/"},{"name":"Kaggle","slug":"Project/Kaggle","permalink":"https://cho111.github.io/categories/Project/Kaggle/"}],"tags":[{"name":"Machine learning , Project","slug":"Machine-learning-Project","permalink":"https://cho111.github.io/tags/Machine-learning-Project/"}]},{"title":"파이썬 시각화 실습","slug":"python_visualization","date":"2021-04-07T02:46:18.000Z","updated":"2021-06-25T12:15:59.316Z","comments":true,"path":"2021/04/07/python_visualization/","link":"","permalink":"https://cho111.github.io/2021/04/07/python_visualization/","excerpt":"","text":"라이브러리 호출12345## 필요한 라이브러리들을 불러옵니다.import matplotlib.pyplot as plt from matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)import seaborn as snsimport numpy as np 시각화코드 함수생성12345678910111213141516171819202122232425# 시각화코드 함수로 생성 시각화코드 함수로 생성def plot_example(ax, zorder=0): ax.bar(tips_day[&quot;day&quot;], tips_day[&quot;tip&quot;], color=&quot;lightgray&quot;, zorder=zorder) # 요일별 평균데이터를 bar plot으로 만들기 ax.set_title(&quot;tip (mean)&quot;, fontsize=16, pad=12) # 그래프 타이틀 지정옵션 # Values h_pad = 0.1 # 높이 여백설정 옵션 / 입력형태 : float for i in range(4): # 반복문 4번 실행 fontweight = &quot;normal&quot; # 글자 굵기 노말 color = &quot;k&quot; # 색상지정 옵션 if i == 3: # 조건문 i가 3이면 fontweight = &quot;bold&quot; # 글자 굵기 굵게 color = &quot;darkred&quot; # 색상 지정 옵션 # bar위에 데이터를 글자로 넣기 ax.text(i, tips_day[&quot;tip&quot;].loc[i] + h_pad, f&quot;&#123;tips_day[&#x27;tip&#x27;].loc[i]:0.2f&#125;&quot;, horizontalalignment=&#x27;center&#x27;, fontsize=12, fontweight=fontweight, color=color) # Sunday ax.patches[3].set_facecolor(&quot;darkred&quot;) # set_facecolor()-&gt; 그래프의 막대 색상지정 짙은 빨강 ax.patches[3].set_edgecolor(&quot;black&quot;) # set_edgecolor()-&gt; 그래프의 막대 테두리 색지정 검정 # set_range ax.set_ylim(0, 4) # y축 범위 return ax # ax값으로 리턴 예시자료 데이터 -&gt; 조건에 맞게 평균출력12345tips = sns.load_dataset(&quot;tips&quot;) # 예시로 seaborn의 tips 데이터 불러오기tips_day = tips.groupby(&quot;day&quot;).mean().reset_index() # groupby를 이용해 요일별 평균 데이터 생성print(tips_day) # 요일별 평균 데이터 만든것을 출력ips = sns.load_dataset(&quot;tips&quot;) # 예시로 seaborn의 tips 데이터 불러오기tips_day = tips.groupby(&quot;day&quot;).mean().reset_index() # groupby를 이용해 요일별 평균 데이터 생성print(tips_day) # 요일별 평균 데이터 만든것을 출력 day total_bill tip size 0 Thur 17.682742 2.771452 2.451613 1 Fri 17.151579 2.734737 2.105263 2 Sat 20.441379 2.993103 2.517241 3 Sun 21.410000 3.255132 2.842105 시각화 호출 11234567fig, ax = plt.subplots(figsize=(10, 6)) # 그래프 호출 / figsize = 그래프 크기옵션ax = plot_example(ax, zorder=2) # 그래프내의 막대 시각화## spine 숨기기 ax.spines[&quot;top&quot;].set_visible(False) ax.spines[&quot;right&quot;].set_visible(False)ax.spines[&quot;left&quot;].set_visible(False) 시각화 호출 2123456789101112131415fig, ax = plt.subplots() # 그래프 호출 ax = plot_example(ax, zorder=2) # 그래프내의 막대 시각화## spine 숨기기 ax.spines[&quot;top&quot;].set_visible(False)ax.spines[&quot;right&quot;].set_visible(False)ax.spines[&quot;left&quot;].set_visible(False)ax.yaxis.set_major_locator(MultipleLocator(1)) # major tick을 1 단위로 설정ax.yaxis.set_major_formatter(formatter) # major tick format 지정 (오류가 나면 matplotlib upgrade)ax.yaxis.set_minor_locator(MultipleLocator(0.5)) # minor tick을 0.5 단위로 지정ax.grid(axis=&quot;y&quot;, which=&quot;major&quot;, color=&quot;lightgray&quot;) # 그래프 표시선 넣기 -&gt; major라인 실선ax.grid(axis=&quot;y&quot;, which=&quot;minor&quot;, ls=&quot;:&quot;) # 그래프 표시선 넣기 -&gt; minor라인 점선# ax.grid(axis=&quot;y&quot;, which=&quot;both&quot;) -&gt; major, minor 둘다 자료 출처 참고블로그 https://jehyunlee.github.io/2020/08/27/Python-DS-28-mpl_spines_grids/","categories":[{"name":"Python","slug":"Python","permalink":"https://cho111.github.io/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://cho111.github.io/tags/python/"}]},{"title":"Numpy 정리","slug":"numpy","date":"2021-04-06T06:54:47.000Z","updated":"2021-06-25T12:15:59.315Z","comments":true,"path":"2021/04/06/numpy/","link":"","permalink":"https://cho111.github.io/2021/04/06/numpy/","excerpt":"","text":"1. Numpy 기본함수 arange12arrange_array = np.arange(5)arrange_array array([0, 1, 2, 3, 4]) # array [0, 1, 2, 3, 4]의 형태로 반환 12arrange_array2 = np.arange(1, 9, 3)arrange_array2 array([1, 4, 7]) # 1부터 시작 9까지 3간격으로 array[1, 4, 7] 형태로 반환 zoroes1234zeros_array = np.zeros((3,2))print(zeros_array)print(&quot;Data Type is:&quot;, zeros_array.dtype)print(&quot;Data Shape is:&quot;, zeros_array.shape) [[0. 0.] [0. 0.] [0. 0.]] Data Type is: float64 Data Shape is: (3, 2) ones1234ones_array = np.ones((3,4), dtype=&#x27;int32&#x27;)print(ones_array)print(&quot;Data Type is:&quot;, ones_array.dtype)print(&quot;Data Shape is:&quot;, ones_array.shape) [[1 1 1 1] [1 1 1 1] [1 1 1 1]] Data Type is: int32 Data Shape is: (3, 4) reshape123after_reshape = ones_array.reshape(6,2)print(after_reshape)print(&quot;Data Shape is:&quot;, after_reshape.shape) [[1 1] [1 1] [1 1] [1 1] [1 1] [1 1]] Data Shape is: (6, 2)","categories":[{"name":"Python","slug":"Python","permalink":"https://cho111.github.io/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://cho111.github.io/tags/python/"}]},{"title":"python 기초문법","slug":"python","date":"2021-04-06T02:47:52.000Z","updated":"2021-06-25T12:15:59.316Z","comments":true,"path":"2021/04/06/python/","link":"","permalink":"https://cho111.github.io/2021/04/06/python/","excerpt":"","text":"1. Hello World 출력1print(&quot;Hello World&quot;); Hello, world! 2. 주석처리 한줄주석처리 -&gt; # 여러줄 주석처리 -&gt; 동일한 따옴표(“”” or ‘’’) 3개와 3개 사이에는 어떠한내용이 들어가도 주석처리가된다. 3. 사칙연산123456789a = 5b = 7print(&#x27;a + b = &#x27;, a+b); # 더하기print(&#x27;a - b = &#x27;, a-b); # 빼기print(&#x27;a * b = &#x27;, a*b); # 곱하기print(&#x27;a / b = &#x27;, a/b); # 나누기print(&#x27;a // b = &#x27;, a//b); # 몫print(&#x27;a % b = &#x27;, a%b); # 나머지print(&#x27;a ** b = &#x27;, a**b); # 거듭제곱 a + b = 12 a - b = -2 a * b = 35 a / b = 0.7142857142857143 a // b = 0 a % b = 5 a ** b = 78125 4. 문자열123456str1 = &quot;Hello&quot;;str2 = &quot;World&quot;;print(&#x27;str1 + str2=&#x27;, str1 + str2);str = str1 + str2print(&#x27;str * 3 = &#x27;, str * 3); str1 + str2 = Hello World str * 3 = Hello World Hello World Hello World 5. Indexing12str = &quot;Hello World!&quot;;print(str[6]); W 4. Slicing123456str = &quot;Hello World!&quot;print(str[:]) # 인덱스 처음부터 끝까지print(str[6:]) # 인덱스 6부터 끝까지 잘라서 출력print(str[:6]) # 인덱스 0부터 5까지 잘라서 출력print(str[2:8]) # 인덱스 2부터 7까지 잘라서 출력print(str[0:9:2]) # 인덱스를 0부터 2씩 증가시키면서 8까지 출력 Hello World! World! Hello llo Wo HloWr 5. List 리스트 12345a = [] # 빈 리스트a_list = list() #list()함수로도 빈 리스트를 만들 수 있다.b = [1] # 숫자도 요소가 될 수 있다.c = [&#x27;str&#x27;] # 문자열도 요소가 될 수 있다d = [1, 2, [&#x27;str&#x27;]] # 리스트 안에 리스트를 요소로 넣을 수 있다. [] [] [1] [&#39;str&#39;] [1, 2, [&#39;str&#39;]] 123456a = [1, 2, 3]# index [[0], [1], [2]]print(a[0]) # 첫번째 요소print(a[1]) # 두번째 요소print(a[2]) # 세번째 요소print(a[-1]) # 역순 1 2 3 3 12345a = [[&#x27;str1&#x27;,&#x27;str2&#x27;,&#x27;str3&#x27;]]print(a[0]) # 리스트 내의 리스트print(a[0][0]) # 리스트 내의 리스트의 첫번째 문자열print(a[0][0][3]) # 리스트 내의 리스트의 첫번째 문자열 &#x27;apple&#x27; 중 첫번째 인덱스print(a[0][1]) # 리스트 내의 리스트의 두번째 문자열 [&#39;str1&#39;, &#39;str2&#39;, &#39;str3&#39;] str1 1 str2 리스트 값 수정 1234a = [0,1,2]a[1] = &quot;b&quot;print(a) [0, &#39;b&#39;, 2] 리스트값 추가 123456a = [1, 2, 3]a.append(4)print(a)a.append([5,6])print(a) [1, 2, 3, 4] [1, 2, 3, 4, [5, 6]] 1234a = [0,1,2]a.insert(1,7)print(a) [0, 7, 1, 2] 리스트 값 삭제 12345a =[1,2,1,2]#리스트의 첫번째 1이 삭제a.remove(1)print(a) [2, 1, 2] 12345678910a = [0,1,2,3,4,5]# 1 삭제del a[1]print(a)b = [0,1,2,3,4,5]# 범위로 삭제del b[1:3] #list는 항상 시작하는 index부터, 종료하는 n의 n-1까지의 범위를 잡아줍니다.print(b) [0, 2, 3, 4, 5] [0, 3, 4, 5] 6. Tuple1234a = () # 비어있는 튜플생성a1 = (0) # 값이 한개인경우 끝에 콤마(,)를 붙이지 않았을 때는 튜플 자료형이 아니다.a2 = (0,) # 값이 한개인 경우 끝에 콤마(,)를 붙여줘야만 튜플형 자료형이다a3 = 0,1,2 # 여러개의 값 일경우 괄호가 없어도 튜플 자료형이다 7. List 와 Tuple의 차이점 공통점 list와 tuple모두 여러 데이터를 담을 수 있는 컨테이너형 변수이다. list와 tuple 모두 인덱스를 통해 특정 요소에 접근할 수 있다. list와 tuple 모두 iterable하다. 즉, for문에 넣고 돌릴 수 있다. 차이점 list는 mutable(가변)하지만 tuple은 immutable(불변)하다. 따라서, list는 딕셔너리의 key값(해쉬값)으로 쓸 수 없지만, tuple은 가능하다. iteration을 도는 속도가 튜플이 더 빠르다. List는 내부의 값을 변경할수 있지만 Tuple은 내부의 값을 변경하거나 삭제를 할수없습니다. List생성은 대괄호[] Tuple생성은 소괄호()입니다.","categories":[{"name":"Python","slug":"Python","permalink":"https://cho111.github.io/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://cho111.github.io/tags/python/"}]},{"title":"데이터 시각화","slug":"Data-visualisation","date":"2021-03-29T07:40:15.000Z","updated":"2021-06-25T12:15:59.315Z","comments":true,"path":"2021/03/29/Data-visualisation/","link":"","permalink":"https://cho111.github.io/2021/03/29/Data-visualisation/","excerpt":"","text":"1. 소개데이터 시각화는 데이터를 그림이나 그래프를 통해 시작적으로 표현하는 모든 과정입니다.시각화는 단순히 멋있게 만드는것을 떠나 데이터를 쉽게 보고 이해할 수 있도록 도와줍니다. 1.1. 전제 조건R에는 그래프를 만들기위한 여러 시스템이 있지만 그중하나인 ggplot2에 중점을 두고 정리를 해볼려고 합니다. tidyverse 패키지는 R에서 데이터를 정제하고 다루는 패키지를 묶어서 하나의 패키지로 만든것이다. 설치방법12install.packages(&quot;tidyverse&quot;) -&gt; 패키지 설치library(tidyverse) -&gt; 패키지 불러오기 2. 첫 단계ggplot2 에 내장된 샘플데이터를 이용해 분석을 진행해보자. 2.1. mpg 데이터 프레임mpg데이터는 ggplot2 에 내장된 샘플데이터로 자동차모델에 대한 정보입니다. 1234567891011mpg#&gt; # A tibble: 234 x 11#&gt; manufacturer model displ year cyl trans drv cty hwy fl class #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compa…#&gt; 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compa…#&gt; 3 audi a4 2 2008 4 manual(m6) f 20 31 p compa…#&gt; 4 audi a4 2 2008 4 auto(av) f 21 30 p compa…#&gt; 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compa…#&gt; 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compa…#&gt; # … with 228 more rows 위 데이터에서 ggplot로 시각화시킬 변수는 displ(엔진크기), hwy(자동차연비)로 하겠습니다. 2.2. ggplot 생성ggplot를 생성하는 코드입니다 12ggplot(data &#x3D; mpg) + geom_point(mapping &#x3D; aes(x &#x3D; displ, y &#x3D; hwy)) ggppot(data = mpg) 를 실행하면 mpg데이터를 기반으로한 빈그래프가 생성됩니다. 생성된 빈그래프에 하나 이상의 레이어를 추가해서 그래프를 완성시켜줍니다. geom_point()는 점 레이어를 추가하여 산점도를 생성해서 위 사진과 같은 완성된 그래프가 나오게됩니다. 2.2.1 미적매핑 ggplot2의 각 geom 함수는 mapping 인수를 받습니다. 이는 데이터의 변수가 시각적 속성에 매핑되는 방식을 정의합니다. mapping인수는 항상 미학요소(aesthetics, aes) 에 x축과 y축에 매핑되는 변수를 지정하고 크기 형태 색상등을 매핑할수 있습니다.12ggplot(data &#x3D; mpg) + geom_point(mapping &#x3D; aes(x &#x3D; displ, y &#x3D; hwy, color &#x3D; class)) 위 사진은 첫번쨰 산점도그래프의 자료에서 자동차의 등급별생상을 나타낸 자료입니다 . 3. 막대 그래프데이터를 막대그래프로 표현하기위해선 geom_bar()를 씁니다예시로 내장된 샘플데이터 diamonds를 사용하여 막대그래프를 표현해보겠습니다. 12ggplot(data &#x3D; diamonds) + geom_bar(mapping &#x3D; aes(x &#x3D; cut)) 위 사진은 샘플데이터 diamonds 의 품질 및 개수를 막대 그래프로 나타낸 것 입니다.","categories":[{"name":"R","slug":"R","permalink":"https://cho111.github.io/categories/R/"}],"tags":[{"name":"R","slug":"R","permalink":"https://cho111.github.io/tags/R/"}]},{"title":"데이터 변환 정리","slug":"Data transformation","date":"2021-03-23T08:25:01.000Z","updated":"2021-06-25T12:15:59.314Z","comments":true,"path":"2021/03/23/Data transformation/","link":"","permalink":"https://cho111.github.io/2021/03/23/Data%20transformation/","excerpt":"","text":"1. 소개데이터 시각화는 통찰력 생성에 중요한 도구지만 정확한 형식으로 데이터를 얻기 힘들기 떄문에 데이터 변환을 이용한다. 1.1. 전제조건tidyverse의 또 다른 핵심 멤버 인 dplyr 패키지를 사용하는 방법에 초점을 맞춘 정리입니다.nycflights13 패키지의 데이터를 사용하여 데이터 변환에 대한 정리 했습니다. 12library(nycflights13)library(tidyverse) 1.2. nycflights13이 데이터는 2013년 뉴욕에서 출발한 항공편의 데이터입니다. 12345678910111213flights#&gt; # A tibble: 336,776 x 19#&gt; year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time#&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;#&gt; 1 2013 1 1 517 515 2 830 819#&gt; 2 2013 1 1 533 529 4 850 830#&gt; 3 2013 1 1 542 540 2 923 850#&gt; 4 2013 1 1 544 545 -1 1004 1022#&gt; 5 2013 1 1 554 600 -6 812 837#&gt; 6 2013 1 1 554 558 -4 740 728#&gt; # … with 336,770 more rows, and 11 more variables: arr_delay &lt;dbl&gt;,#&gt; # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;,#&gt; # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; 데이터 프레임의 아랫줄에 &lt;&gt;안에 들어가는 단어는 각변수의 데이터 유형을 뜻합니다. int -&gt; 정수를 의미 dbl -&gt; 실수를 의미 chr -&gt; 문자열 의미 dttm -&gt; 날짜-시간 의미 1-3. dplyr의 기본사항dplyr 함수에는 대부분의 데이터 조작 문제를 해결할 수 있는 5가지 주요함수가 있습니다.여기에 group_by() 함수를 추가로 이용하면 그룹별로 다양한 집계를 할 수 있습니다. 2. filter()fliter()함수는 조건에 따라 행(row)를 추출한다. fliter()함수의 사용방법 첫번째 인수에 추출대상이 되는 데이터 프레임을 지정 두번쨰 인수에 추출하고싶은 행의 조건을 지정아래의 데이터는 filter() 함수를 써서 1월1일의 정보만 추출한 것이다 12345678910111213filter(flights, month &#x3D;&#x3D; 1, day &#x3D;&#x3D; 1)#&gt; # A tibble: 842 x 19#&gt; year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time#&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;#&gt; 1 2013 1 1 517 515 2 830 819#&gt; 2 2013 1 1 533 529 4 850 830#&gt; 3 2013 1 1 542 540 2 923 850#&gt; 4 2013 1 1 544 545 -1 1004 1022#&gt; 5 2013 1 1 554 600 -6 812 837#&gt; 6 2013 1 1 554 558 -4 740 728#&gt; # … with 836 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,#&gt; # flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,#&gt; # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; filter() 함수를 실행하면 dplyr은 필터링작업을 실행하고 적용한 조건에 맞는 새 데이터 프레임을 반환합니다filter() 함수는 dplyr의 특징과 마찬가지로 filter()함수를 이용해 추출한 결과값을 변수로 지정하지 않으면 그 값이 따로 저장되지 않으며, 원본 데이터를 변형시키지 않습니다. 예)1변수 &lt;- filter(flights, month &#x3D;&#x3D; 1, day &#x3D;&#x3D; 1) 2.1. 비교필터링을 효과적으로 사용하려면 비교연산자 와 논리연산자를 이해하고 적절하게 쓸수있어야합니다. 2.1.1 비교 연산자비교연산자를 사용하여 원하는 조건을 구현할수 있는 방법을 알아야합니다. 2.1.2 논리 연산자논리 연산자에는 AND , OR , NOT 3가지가 있습니다 논리연산의 결과는 TRUE 와 FALSE 라는 진리값 입니다. 2.1.3 결측값NA 는 값이 기록되지 않거나 관측되지 않은 경우 데어터에 저장되는 값으로 결측치(Missing Value)라고 한다. NA 유무 확인 is.na() 를 사용하면 값이 누락되었는지 확인할수있다. in.na()는 백터의 결측지가 존재할경우 ture를 출력한다. ```is.na(x)#&gt; [1] TRUE1234567* NA는 Missing Value를 표현하는 논리형 자료지만, &quot;NA&quot;는 문자열 그자체이기 떄문에 사용에 주의 해야한다. - &#96;&#96;&#96; is.na(NA) #&gt; [1] TRUE is.na(&quot;NA&quot;) #&gt; [1] FALSE 3. arrange()arrange()함수는 지정한 열을 기준으로 오름차순으로 정렬합니다. arrange()함수의 사용방법 arrange(데이터 프레임, 열이름) 역순으로 정렬할 때는 desc()함수를 함께 사용합니다. arrange(데이터 프레임, desc(열이름)) arrange()함수를 써서 값을받았을떄 누락된 값은 오름차순을 쓰나 내림차순을 쓰나 항상 끝에 정렬됩니다. 4. select()select()함수는 데이터에 있는 수 많은 변수들 중 일부만 추출해서 쓸떄 사용한다 select()함수의 사용방법 select(데이터 프레임, 변수) -&gt; 지정한 데이터 프레임에서 선택한 변수의 열(column)만 추출해서 보여준다. select(데이터 프레임, -변수) -&gt; 지정한 데이터 프레임에서 선택한 변수를 제외한 나머지 열(column)을 추출해서 보여준다. select(데이터 프레임, 변수:변수) -&gt;지정한 데이터 프레임에서 선택한 변수에서 부터 선택한 변수까지의 열(column)을 추출해서 보여준다. 5. mutate()mutate()함수는 데이터 프레임에 새로운 열(column)을 만들거나 기존의 열(column)을 조건에 맞게 변경할떄 사용합니다.mutate()를써서 새로 생성된 열(column)은 별도의 변수로 지정하거나 기존의 데이터에 덮어씌우지 않는한 저장되지는 않는다. mutate()함수의 사용법 mutate(데이터 프레임, 새로운 column명 = 기존 columns을 조합한 수식) 6. summarise()summarise()함수는 각종 통계함수와 함께 사용하여 데이터 프레임의 특정변수에 속한 값들을 하나의 통계값으로 요약하여 반환하는 함수입니다. summarise()와 함께 사용하는 주요 통계함수- summarise()함수 사용법 summarise(데이터프레임, 통계값담을column명 = 통계함수(통계값구할column)) na.rm=TRUE 통계 계산시 NA값을 제외하고 계산한다. summarise(데이터프레임, 통계값담을column명 = 통계함수(통계값구할column, na.rm=TRUE)) 7. group_by()특정 열을 기준으로 데이터프레임을 요약해서 봐야할경우(피벗 테이블을 만들고 싶을떄)쓴다. group_by()함수 사용법 group_by(기준이되는 column) %&gt;%summarise(통계값담을column명 = 통계함수(통계값구할column))","categories":[{"name":"R","slug":"R","permalink":"https://cho111.github.io/categories/R/"}],"tags":[{"name":"R","slug":"R","permalink":"https://cho111.github.io/tags/R/"}]}],"categories":[{"name":"Project","slug":"Project","permalink":"https://cho111.github.io/categories/Project/"},{"name":"Study","slug":"Project/Study","permalink":"https://cho111.github.io/categories/Project/Study/"},{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/categories/Study/"},{"name":"Review","slug":"Study/Review","permalink":"https://cho111.github.io/categories/Study/Review/"},{"name":"C++","slug":"Study/C","permalink":"https://cho111.github.io/categories/Study/C/"},{"name":"C++","slug":"C","permalink":"https://cho111.github.io/categories/C/"},{"name":"Dacon","slug":"Project/Dacon","permalink":"https://cho111.github.io/categories/Project/Dacon/"},{"name":"Kaggle","slug":"Project/Kaggle","permalink":"https://cho111.github.io/categories/Project/Kaggle/"},{"name":"Python","slug":"Python","permalink":"https://cho111.github.io/categories/Python/"},{"name":"R","slug":"R","permalink":"https://cho111.github.io/categories/R/"}],"tags":[{"name":"Python, YOLO, PyQt5","slug":"Python-YOLO-PyQt5","permalink":"https://cho111.github.io/tags/Python-YOLO-PyQt5/"},{"name":"study","slug":"study","permalink":"https://cho111.github.io/tags/study/"},{"name":"Study","slug":"Study","permalink":"https://cho111.github.io/tags/Study/"},{"name":"C++, Qt","slug":"C-Qt","permalink":"https://cho111.github.io/tags/C-Qt/"},{"name":"Machine learning , python","slug":"Machine-learning-python","permalink":"https://cho111.github.io/tags/Machine-learning-python/"},{"name":"Deep learning , Project","slug":"Deep-learning-Project","permalink":"https://cho111.github.io/tags/Deep-learning-Project/"},{"name":"Machine learning , Project","slug":"Machine-learning-Project","permalink":"https://cho111.github.io/tags/Machine-learning-Project/"},{"name":"python","slug":"python","permalink":"https://cho111.github.io/tags/python/"},{"name":"R","slug":"R","permalink":"https://cho111.github.io/tags/R/"}]}